local SimpleIMGUI = {}

function SimpleIMGUI:Begin(props)
    local gui = Instance.new("ScreenGui")
    gui.Name = "SimpleIMGUI_"..tostring(math.random(1,10000))
    gui.Parent = game:GetService("CoreGui") or game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
    
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainWindow"
    mainFrame.Size = UDim2.new(0, props.Width or 500, 0, props.Height or 400)
    mainFrame.Position = UDim2.new(0.5, -props.Width/2, 0.5, -props.Height/2)
    mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 40)
    mainFrame.BorderSizePixel = 0
    mainFrame.Parent = gui
    
    local titleBar = Instance.new("Frame")
    titleBar.Name = "TitleBar"
    titleBar.Size = UDim2.new(1, 0, 0, 30)
    titleBar.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
    titleBar.Parent = mainFrame
    
    local titleText = Instance.new("TextLabel")
    titleText.Name = "Title"
    titleText.Size = UDim2.new(1, -40, 1, 0)
    titleText.Position = UDim2.new(0, 10, 0, 0)
    titleText.Text = props.Name or "Simple IMGUI"
    titleText.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleText.BackgroundTransparency = 1
    titleText.Font = Enum.Font.Gotham
    titleText.TextSize = 14
    titleText.TextXAlignment = Enum.TextXAlignment.Left
    titleText.Parent = titleBar
    
    local closeButton = Instance.new("TextButton")
    closeButton.Name = "CloseButton"
    closeButton.Size = UDim2.new(0, 30, 1, 0)
    closeButton.Position = UDim2.new(1, -30, 0, 0)
    closeButton.Text = "X"
    closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeButton.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
    closeButton.BorderSizePixel = 0
    closeButton.Parent = titleBar
    
    local contentFrame = Instance.new("ScrollingFrame")
    contentFrame.Name = "Content"
    contentFrame.Size = UDim2.new(1, -10, 1, -40)
    contentFrame.Position = UDim2.new(0, 5, 0, 35)
    contentFrame.BackgroundTransparency = 1
    contentFrame.ScrollBarThickness = 8
    contentFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
    contentFrame.Parent = mainFrame
    
    local layout = Instance.new("UIListLayout")
    layout.Padding = UDim.new(0, 5)
    layout.Parent = contentFrame
    
    -- Dragging functionality
    local dragging = false
    local dragStart, startPos
    
    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    titleBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
            local delta = input.Position - dragStart
            mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
    
    closeButton.MouseButton1Click:Connect(function()
        gui:Destroy()
    end)
    
    -- Element handler
    local ElementHandler = {}
    
    function ElementHandler:SliderFloat(props)
        local sliderFrame = Instance.new("Frame")
        sliderFrame.Name = "Slider"
        sliderFrame.Size = UDim2.new(1, 0, 0, 40)
        sliderFrame.BackgroundTransparency = 1
        sliderFrame.Parent = contentFrame
        
        local nameLabel = Instance.new("TextLabel")
        nameLabel.Name = "Name"
        nameLabel.Size = UDim2.new(1, 0, 0, 20)
        nameLabel.Text = props.Name or "Slider"
        nameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        nameLabel.BackgroundTransparency = 1
        nameLabel.Font = Enum.Font.Gotham
        nameLabel.TextSize = 14
        nameLabel.TextXAlignment = Enum.TextXAlignment.Left
        nameLabel.Parent = sliderFrame
        
        local track = Instance.new("Frame")
        track.Name = "Track"
        track.Size = UDim2.new(1, 0, 0, 5)
        track.Position = UDim2.new(0, 0, 0, 25)
        track.BackgroundColor3 = Color3.fromRGB(60, 60, 70)
        track.BorderSizePixel = 0
        track.Parent = sliderFrame
        
        local fill = Instance.new("Frame")
        fill.Name = "Fill"
        fill.Size = UDim2.new(0, 0, 1, 0)
        fill.BackgroundColor3 = Color3.fromRGB(100, 150, 255)
        fill.BorderSizePixel = 0
        fill.Parent = track
        
        local handle = Instance.new("Frame")
        handle.Name = "Handle"
        handle.Size = UDim2.new(0, 10, 0, 15)
        handle.Position = UDim2.new(0, 0, 0, -5)
        handle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        handle.BorderSizePixel = 0
        handle.Parent = track
        
        local valueText = Instance.new("TextLabel")
        valueText.Name = "Value"
        valueText.Size = UDim2.new(0, 50, 0, 20)
        valueText.Position = UDim2.new(1, -50, 0, 0)
        valueText.Text = tostring(props.Default or 0)
        valueText.TextColor3 = Color3.fromRGB(255, 255, 255)
        valueText.BackgroundTransparency = 1
        valueText.Font = Enum.Font.Gotham
        valueText.TextSize = 14
        valueText.TextXAlignment = Enum.TextXAlignment.Right
        valueText.Parent = sliderFrame
        
        local min = props.Min or 0
        local max = props.Max or 100
        local currentValue = props.Default or min
        
        local function updateSlider(value)
            currentValue = math.clamp(value, min, max)
            local ratio = (currentValue - min) / (max - min)
            fill.Size = UDim2.new(ratio, 0, 1, 0)
            handle.Position = UDim2.new(ratio, -5, 0, -5)
            valueText.Text = string.format("%.2f", currentValue)
            
            if props.OnChanged then
                pcall(props.OnChanged, currentValue)
            end
        end
        
        local dragging = false
        track.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
                local x = input.Position.X - track.AbsolutePosition.X
                local ratio = math.clamp(x / track.AbsoluteSize.X, 0, 1)
                updateSlider(min + ratio * (max - min))
            end
        end)
        
        track.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = false
            end
        end)
        
        game:GetService("UserInputService").InputChanged:Connect(function(input)
            if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                local x = input.Position.X - track.AbsolutePosition.X
                local ratio = math.clamp(x / track.AbsoluteSize.X, 0, 1)
                updateSlider(min + ratio * (max - min))
            end
        end)
        
        updateSlider(currentValue)
    end
    
    function ElementHandler:SliderInteger(props)
        local sliderFrame = Instance.new("Frame")
        sliderFrame.Name = "Slider"
        sliderFrame.Size = UDim2.new(1, 0, 0, 40)
        sliderFrame.BackgroundTransparency = 1
        sliderFrame.Parent = contentFrame
        
        local nameLabel = Instance.new("TextLabel")
        nameLabel.Name = "Name"
        nameLabel.Size = UDim2.new(1, 0, 0, 20)
        nameLabel.Text = props.Name or "Slider"
        nameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        nameLabel.BackgroundTransparency = 1
        nameLabel.Font = Enum.Font.Gotham
        nameLabel.TextSize = 14
        nameLabel.TextXAlignment = Enum.TextXAlignment.Left
        nameLabel.Parent = sliderFrame
        
        local track = Instance.new("Frame")
        track.Name = "Track"
        track.Size = UDim2.new(1, 0, 0, 5)
        track.Position = UDim2.new(0, 0, 0, 25)
        track.BackgroundColor3 = Color3.fromRGB(60, 60, 70)
        track.BorderSizePixel = 0
        track.Parent = sliderFrame
        
        local fill = Instance.new("Frame")
        fill.Name = "Fill"
        fill.Size = UDim2.new(0, 0, 1, 0)
        fill.BackgroundColor3 = Color3.fromRGB(100, 150, 255)
        fill.BorderSizePixel = 0
        fill.Parent = track
        
        local handle = Instance.new("Frame")
        handle.Name = "Handle"
        handle.Size = UDim2.new(0, 10, 0, 15)
        handle.Position = UDim2.new(0, 0, 0, -5)
        handle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        handle.BorderSizePixel = 0
        handle.Parent = track
        
        local valueText = Instance.new("TextLabel")
        valueText.Name = "Value"
        valueText.Size = UDim2.new(0, 50, 0, 20)
        valueText.Position = UDim2.new(1, -50, 0, 0)
        valueText.Text = tostring(props.Default or 0)
        valueText.TextColor3 = Color3.fromRGB(255, 255, 255)
        valueText.BackgroundTransparency = 1
        valueText.Font = Enum.Font.Gotham
        valueText.TextSize = 14
        valueText.TextXAlignment = Enum.TextXAlignment.Right
        valueText.Parent = sliderFrame
        
        local min = props.Min or 0
        local max = props.Max or 100
        local currentValue = props.Default or min
        
        local function updateSlider(value)
            currentValue = math.floor(math.clamp(value, min, max))
            local ratio = (currentValue - min) / (max - min)
            fill.Size = UDim2.new(ratio, 0, 1, 0)
            handle.Position = UDim2.new(ratio, -5, 0, -5)
            valueText.Text = tostring(currentValue)
            
            if props.OnChanged then
                pcall(props.OnChanged, currentValue)
            end
        end
        
        local dragging = false
        track.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
                local x = input.Position.X - track.AbsolutePosition.X
                local ratio = math.clamp(x / track.AbsoluteSize.X, 0, 1)
                updateSlider(min + ratio * (max - min))
            end
        end)
        
        track.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = false
            end
        end)
        
        game:GetService("UserInputService").InputChanged:Connect(function(input)
            if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                local x = input.Position.X - track.AbsolutePosition.X
                local ratio = math.clamp(x / track.AbsoluteSize.X, 0, 1)
                updateSlider(min + ratio * (max - min))
            end
        end)
        
        updateSlider(currentValue)
    end
    
    function ElementHandler:CheckBox(props)
    local checkBoxFrame = Instance.new("Frame")
    checkBoxFrame.Name = "CheckBox"
    checkBoxFrame.Size = UDim2.new(1, 0, 0, 30)
    checkBoxFrame.BackgroundTransparency = 1
    checkBoxFrame.Parent = contentFrame

    -- Invisible button that captures clicks across the whole row
    local clickRegion = Instance.new("TextButton")
    clickRegion.Name = "ClickRegion"
    clickRegion.Size = UDim2.new(1, 0, 1, 0)
    clickRegion.BackgroundTransparency = 1
    clickRegion.Text = ""
    clickRegion.AutoButtonColor = false
    clickRegion.BorderSizePixel = 0
    clickRegion.Parent = checkBoxFrame

    local box = Instance.new("Frame")
    box.Name = "Box"
    box.Size = UDim2.new(0, 20, 0, 20)
    box.Position = UDim2.new(0, 0, 0.5, -10)
    box.BackgroundColor3 = Color3.fromRGB(60, 60, 70)
    box.BorderSizePixel = 0
    box.Parent = checkBoxFrame

    local check = Instance.new("Frame")
    check.Name = "Check"
    check.Size = UDim2.new(0, 14, 0, 14)
    check.Position = UDim2.new(0.5, -7, 0.5, -7)
    check.BackgroundColor3 = Color3.fromRGB(100, 150, 255)
    check.BorderSizePixel = 0
    check.Visible = props.Enabled or false
    check.Parent = box

    local nameLabel = Instance.new("TextLabel")
    nameLabel.Name = "Name"
    nameLabel.Size = UDim2.new(1, -30, 1, 0)
    nameLabel.Position = UDim2.new(0, 30, 0, 0)
    nameLabel.Text = props.Name or "CheckBox"
    nameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    nameLabel.BackgroundTransparency = 1
    nameLabel.Font = Enum.Font.Gotham
    nameLabel.TextSize = 14
    nameLabel.TextXAlignment = Enum.TextXAlignment.Left
    nameLabel.Parent = checkBoxFrame

    local enabled = props.Enabled or false

    local function toggle()
        enabled = not enabled
        check.Visible = enabled
        if props.OnChanged then
            pcall(props.OnChanged, enabled)
        end
    end

    -- Capture clicks anywhere on the row
    clickRegion.MouseButton1Click:Connect(toggle)
end

    
    function ElementHandler:Button(text)
        local button = Instance.new("TextButton")
        button.Name = "Button"
        button.Size = UDim2.new(1, 0, 0, 30)
        button.Text = text or "Button"
        button.TextColor3 = Color3.fromRGB(255, 255, 255)
        button.BackgroundColor3 = Color3.fromRGB(60, 60, 70)
        button.BorderSizePixel = 0
        button.Font = Enum.Font.Gotham
        button.TextSize = 14
        button.Parent = contentFrame
        
        local buttonHandler = {}
        
        function buttonHandler:Connect(callback)
            button.MouseButton1Click:Connect(callback)
        end
        
        return buttonHandler
    end
    
    function ElementHandler:Seperator()
        local sep = Instance.new("Frame")
        sep.Name = "Seperator"
        sep.Size = UDim2.new(1, 0, 0, 1)
        sep.BackgroundColor3 = Color3.fromRGB(60, 60, 70)
        sep.BorderSizePixel = 0
        sep.Parent = contentFrame
    end
    
    function ElementHandler:Text(text)
        local textLabel = Instance.new("TextLabel")
        textLabel.Name = "Text"
        textLabel.Size = UDim2.new(1, 0, 0, 20)
        textLabel.Text = text or "Text"
        textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        textLabel.BackgroundTransparency = 1
        textLabel.Font = Enum.Font.Gotham
        textLabel.TextSize = 14
        textLabel.TextXAlignment = Enum.TextXAlignment.Left
        textLabel.Parent = contentFrame
    end
    
    function ElementHandler:End()
        -- Update canvas size when elements are added
        layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            contentFrame.CanvasSize = UDim2.new(0, 0, 0, layout.AbsoluteContentSize.Y + 10)
        end)
    end
    
    return ElementHandler
end

return SimpleIMGUI
