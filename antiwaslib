-- antiwaslib.lua
-- simple IMGUI-style library (no tabs)

local SimpleIMGUI = {}
SimpleIMGUI.__index = SimpleIMGUI

-- create a new window
function SimpleIMGUI:Begin(cfg)
    local window = setmetatable({}, SimpleIMGUI)

    local player = game.Players.LocalPlayer
    local playerGui = player:WaitForChild("PlayerGui")

    -- ScreenGui
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = cfg.Name or "SimpleIMGUI"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = playerGui

    -- Main frame
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, cfg.Width or 400, 0, cfg.Height or 300)
    frame.Position = UDim2.new(0.5, -(cfg.Width or 400)/2, 0.5, -(cfg.Height or 300)/2)
    frame.BackgroundColor3 = Color3.fromRGB(35, 35, 40)
    frame.BorderSizePixel = 0
    frame.Parent = screenGui

    -- UIListLayout for stacking elements
    local layout = Instance.new("UIListLayout")
    layout.Padding = UDim.new(0, 6)
    layout.SortOrder = Enum.SortOrder.LayoutOrder
    layout.Parent = frame

    window._frame = frame
    window._screenGui = screenGui

    return window
end

-- add text label
function SimpleIMGUI:Text(str)
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, -10, 0, 24)
    label.BackgroundTransparency = 1
    label.Text = str
    label.TextColor3 = Color3.new(1, 1, 1)
    label.Font = Enum.Font.Gotham
    label.TextSize = 14
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = self._frame
    return label
end

-- add separator (line)
function SimpleIMGUI:Seperator()
    local line = Instance.new("Frame")
    line.Size = UDim2.new(1, -10, 0, 1)
    line.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
    line.BorderSizePixel = 0
    line.Parent = self._frame
    return line
end

-- add button
function SimpleIMGUI:Button(name)
    local btn = Instance.new("TextButton")
    btn.Size = UDim2.new(1, -10, 0, 28)
    btn.BackgroundColor3 = Color3.fromRGB(60, 60, 70)
    btn.Text = name
    btn.TextColor3 = Color3.new(1, 1, 1)
    btn.Font = Enum.Font.Gotham
    btn.TextSize = 14
    btn.Parent = self._frame

    local signal = Instance.new("BindableEvent")
    btn.MouseButton1Click:Connect(function()
        signal:Fire()
    end)

    return signal.Event
end

-- add checkbox
function SimpleIMGUI:CheckBox(cfg)
    local box = Instance.new("TextButton")
    box.Size = UDim2.new(1, -10, 0, 28)
    box.BackgroundColor3 = Color3.fromRGB(60, 60, 70)
    box.Text = (cfg.Enabled and "[X] " or "[ ] ") .. cfg.Name
    box.TextColor3 = Color3.new(1, 1, 1)
    box.Font = Enum.Font.Gotham
    box.TextSize = 14
    box.TextXAlignment = Enum.TextXAlignment.Left
    box.Parent = self._frame

    local state = cfg.Enabled or false

    box.MouseButton1Click:Connect(function()
        state = not state
        box.Text = (state and "[X] " or "[ ] ") .. cfg.Name
        if cfg.OnChanged then
            cfg.OnChanged(state)
        end
    end)

    return box
end

-- add integer slider
function SimpleIMGUI:SliderInteger(cfg)
    local holder = Instance.new("Frame")
    holder.Size = UDim2.new(1, -10, 0, 40)
    holder.BackgroundTransparency = 1
    holder.Parent = self._frame

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, 0, 0, 16)
    label.BackgroundTransparency = 1
    label.Text = cfg.Name .. ": " .. cfg.Default
    label.TextColor3 = Color3.new(1, 1, 1)
    label.Font = Enum.Font.Gotham
    label.TextSize = 14
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = holder

    local slider = Instance.new("TextButton")
    slider.Size = UDim2.new(1, 0, 0, 20)
    slider.Position = UDim2.new(0, 0, 0, 18)
    slider.BackgroundColor3 = Color3.fromRGB(70, 70, 80)
    slider.Text = ""
    slider.Parent = holder

    local val = cfg.Default or cfg.Min
    label.Text = cfg.Name .. ": " .. val

    local uis = game:GetService("UserInputService")
    local dragging = false

    slider.MouseButton1Down:Connect(function()
        dragging = true
    end)
    uis.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    uis.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local rel = math.clamp((input.Position.X - slider.AbsolutePosition.X) / slider.AbsoluteSize.X, 0, 1)
            val = math.floor(cfg.Min + (cfg.Max - cfg.Min) * rel)
            label.Text = cfg.Name .. ": " .. val
            if cfg.OnChanged then
                cfg.OnChanged(val)
            end
        end
    end)

    return slider
end

-- finish window
function SimpleIMGUI:End()
    -- nothing special for now
end

return SimpleIMGUI
